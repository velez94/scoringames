"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CategoriesStack = void 0;
const cdk = require("aws-cdk-lib");
const dynamodb = require("aws-cdk-lib/aws-dynamodb");
const lambda = require("aws-cdk-lib/aws-lambda");
const events = require("aws-cdk-lib/aws-events");
const constructs_1 = require("constructs");
class CategoriesStack extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        // Domain-specific EventBridge Bus
        this.categoriesEventBus = new events.EventBus(this, 'CategoriesEventBus', {
            eventBusName: `categories-domain-${props.stage}`,
        });
        // Categories Table
        this.categoriesTable = new dynamodb.Table(this, 'CategoriesTable', {
            partitionKey: { name: 'eventId', type: dynamodb.AttributeType.STRING },
            sortKey: { name: 'categoryId', type: dynamodb.AttributeType.STRING },
            billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,
            removalPolicy: cdk.RemovalPolicy.DESTROY,
        });
        // Categories Lambda
        this.categoriesLambda = new lambda.Function(this, 'CategoriesLambda', {
            runtime: lambda.Runtime.NODEJS_18_X,
            handler: 'index.handler',
            code: lambda.Code.fromAsset('lambda/categories'),
            timeout: cdk.Duration.seconds(30),
            memorySize: 256,
            environment: {
                CATEGORIES_TABLE: this.categoriesTable.tableName,
                ORGANIZATION_EVENTS_TABLE: props.organizationEventsTable.tableName,
                ORGANIZATION_MEMBERS_TABLE: props.organizationMembersTable.tableName,
                DOMAIN_EVENT_BUS: this.categoriesEventBus.eventBusName,
                CENTRAL_EVENT_BUS: props.eventBus.eventBusName,
            },
        });
        // Grant permissions
        this.categoriesTable.grantReadWriteData(this.categoriesLambda);
        props.organizationEventsTable.grantReadData(this.categoriesLambda);
        props.organizationMembersTable.grantReadData(this.categoriesLambda);
        this.categoriesEventBus.grantPutEventsTo(this.categoriesLambda);
        props.eventBus.grantPutEventsTo(this.categoriesLambda);
        // Outputs
    }
}
exports.CategoriesStack = CategoriesStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2F0ZWdvcmllcy1zdGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNhdGVnb3JpZXMtc3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbUNBQW1DO0FBQ25DLHFEQUFxRDtBQUNyRCxpREFBaUQ7QUFFakQsaURBQWlEO0FBQ2pELDJDQUF1QztBQVF2QyxNQUFhLGVBQWdCLFNBQVEsc0JBQVM7SUFLNUMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUEyQjtRQUNuRSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLGtDQUFrQztRQUNsQyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxvQkFBb0IsRUFBRTtZQUN4RSxZQUFZLEVBQUUscUJBQXFCLEtBQUssQ0FBQyxLQUFLLEVBQUU7U0FDakQsQ0FBQyxDQUFDO1FBRUgsbUJBQW1CO1FBQ25CLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxpQkFBaUIsRUFBRTtZQUNqRSxZQUFZLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRTtZQUN0RSxPQUFPLEVBQUUsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRTtZQUNwRSxXQUFXLEVBQUUsUUFBUSxDQUFDLFdBQVcsQ0FBQyxlQUFlO1lBQ2pELGFBQWEsRUFBRSxHQUFHLENBQUMsYUFBYSxDQUFDLE9BQU87U0FDekMsQ0FBQyxDQUFDO1FBRUgsb0JBQW9CO1FBQ3BCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLGtCQUFrQixFQUFFO1lBQ3BFLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVc7WUFDbkMsT0FBTyxFQUFFLGVBQWU7WUFDeEIsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDO1lBQ2hELE9BQU8sRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDakMsVUFBVSxFQUFFLEdBQUc7WUFDZixXQUFXLEVBQUU7Z0JBQ1gsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxTQUFTO2dCQUNoRCx5QkFBeUIsRUFBRSxLQUFLLENBQUMsdUJBQXVCLENBQUMsU0FBUztnQkFDbEUsMEJBQTBCLEVBQUUsS0FBSyxDQUFDLHdCQUF3QixDQUFDLFNBQVM7Z0JBQ3BFLGdCQUFnQixFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZO2dCQUN0RCxpQkFBaUIsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLFlBQVk7YUFDL0M7U0FDRixDQUFDLENBQUM7UUFFSCxvQkFBb0I7UUFDcEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUMvRCxLQUFLLENBQUMsdUJBQXVCLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ25FLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDcEUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ2hFLEtBQUssQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFFdkQsVUFBVTtJQUNaLENBQUM7Q0FDRjtBQTlDRCwwQ0E4Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0ICogYXMgZHluYW1vZGIgZnJvbSAnYXdzLWNkay1saWIvYXdzLWR5bmFtb2RiJztcbmltcG9ydCAqIGFzIGxhbWJkYSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtbGFtYmRhJztcbmltcG9ydCAqIGFzIGFwaWdhdGV3YXkgZnJvbSAnYXdzLWNkay1saWIvYXdzLWFwaWdhdGV3YXknO1xuaW1wb3J0ICogYXMgZXZlbnRzIGZyb20gJ2F3cy1jZGstbGliL2F3cy1ldmVudHMnO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2F0ZWdvcmllc1N0YWNrUHJvcHMgIHtcbiAgc3RhZ2U6IHN0cmluZzsgIGV2ZW50QnVzOiBldmVudHMuRXZlbnRCdXM7XG4gIG9yZ2FuaXphdGlvbkV2ZW50c1RhYmxlOiBkeW5hbW9kYi5UYWJsZTtcbiAgb3JnYW5pemF0aW9uTWVtYmVyc1RhYmxlOiBkeW5hbW9kYi5UYWJsZTtcbn1cblxuZXhwb3J0IGNsYXNzIENhdGVnb3JpZXNTdGFjayBleHRlbmRzIENvbnN0cnVjdCB7XG4gIHB1YmxpYyByZWFkb25seSBjYXRlZ29yaWVzTGFtYmRhOiBsYW1iZGEuRnVuY3Rpb247XG4gIHB1YmxpYyByZWFkb25seSBjYXRlZ29yaWVzVGFibGU6IGR5bmFtb2RiLlRhYmxlO1xuICBwdWJsaWMgcmVhZG9ubHkgY2F0ZWdvcmllc0V2ZW50QnVzOiBldmVudHMuRXZlbnRCdXM7XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IENhdGVnb3JpZXNTdGFja1Byb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgIC8vIERvbWFpbi1zcGVjaWZpYyBFdmVudEJyaWRnZSBCdXNcbiAgICB0aGlzLmNhdGVnb3JpZXNFdmVudEJ1cyA9IG5ldyBldmVudHMuRXZlbnRCdXModGhpcywgJ0NhdGVnb3JpZXNFdmVudEJ1cycsIHtcbiAgICAgIGV2ZW50QnVzTmFtZTogYGNhdGVnb3JpZXMtZG9tYWluLSR7cHJvcHMuc3RhZ2V9YCxcbiAgICB9KTtcblxuICAgIC8vIENhdGVnb3JpZXMgVGFibGVcbiAgICB0aGlzLmNhdGVnb3JpZXNUYWJsZSA9IG5ldyBkeW5hbW9kYi5UYWJsZSh0aGlzLCAnQ2F0ZWdvcmllc1RhYmxlJywge1xuICAgICAgcGFydGl0aW9uS2V5OiB7IG5hbWU6ICdldmVudElkJywgdHlwZTogZHluYW1vZGIuQXR0cmlidXRlVHlwZS5TVFJJTkcgfSxcbiAgICAgIHNvcnRLZXk6IHsgbmFtZTogJ2NhdGVnb3J5SWQnLCB0eXBlOiBkeW5hbW9kYi5BdHRyaWJ1dGVUeXBlLlNUUklORyB9LFxuICAgICAgYmlsbGluZ01vZGU6IGR5bmFtb2RiLkJpbGxpbmdNb2RlLlBBWV9QRVJfUkVRVUVTVCxcbiAgICAgIHJlbW92YWxQb2xpY3k6IGNkay5SZW1vdmFsUG9saWN5LkRFU1RST1ksXG4gICAgfSk7XG5cbiAgICAvLyBDYXRlZ29yaWVzIExhbWJkYVxuICAgIHRoaXMuY2F0ZWdvcmllc0xhbWJkYSA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywgJ0NhdGVnb3JpZXNMYW1iZGEnLCB7XG4gICAgICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5OT0RFSlNfMThfWCxcbiAgICAgIGhhbmRsZXI6ICdpbmRleC5oYW5kbGVyJyxcbiAgICAgIGNvZGU6IGxhbWJkYS5Db2RlLmZyb21Bc3NldCgnbGFtYmRhL2NhdGVnb3JpZXMnKSxcbiAgICAgIHRpbWVvdXQ6IGNkay5EdXJhdGlvbi5zZWNvbmRzKDMwKSxcbiAgICAgIG1lbW9yeVNpemU6IDI1NixcbiAgICAgIGVudmlyb25tZW50OiB7XG4gICAgICAgIENBVEVHT1JJRVNfVEFCTEU6IHRoaXMuY2F0ZWdvcmllc1RhYmxlLnRhYmxlTmFtZSxcbiAgICAgICAgT1JHQU5JWkFUSU9OX0VWRU5UU19UQUJMRTogcHJvcHMub3JnYW5pemF0aW9uRXZlbnRzVGFibGUudGFibGVOYW1lLFxuICAgICAgICBPUkdBTklaQVRJT05fTUVNQkVSU19UQUJMRTogcHJvcHMub3JnYW5pemF0aW9uTWVtYmVyc1RhYmxlLnRhYmxlTmFtZSxcbiAgICAgICAgRE9NQUlOX0VWRU5UX0JVUzogdGhpcy5jYXRlZ29yaWVzRXZlbnRCdXMuZXZlbnRCdXNOYW1lLFxuICAgICAgICBDRU5UUkFMX0VWRU5UX0JVUzogcHJvcHMuZXZlbnRCdXMuZXZlbnRCdXNOYW1lLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIC8vIEdyYW50IHBlcm1pc3Npb25zXG4gICAgdGhpcy5jYXRlZ29yaWVzVGFibGUuZ3JhbnRSZWFkV3JpdGVEYXRhKHRoaXMuY2F0ZWdvcmllc0xhbWJkYSk7XG4gICAgcHJvcHMub3JnYW5pemF0aW9uRXZlbnRzVGFibGUuZ3JhbnRSZWFkRGF0YSh0aGlzLmNhdGVnb3JpZXNMYW1iZGEpO1xuICAgIHByb3BzLm9yZ2FuaXphdGlvbk1lbWJlcnNUYWJsZS5ncmFudFJlYWREYXRhKHRoaXMuY2F0ZWdvcmllc0xhbWJkYSk7XG4gICAgdGhpcy5jYXRlZ29yaWVzRXZlbnRCdXMuZ3JhbnRQdXRFdmVudHNUbyh0aGlzLmNhdGVnb3JpZXNMYW1iZGEpO1xuICAgIHByb3BzLmV2ZW50QnVzLmdyYW50UHV0RXZlbnRzVG8odGhpcy5jYXRlZ29yaWVzTGFtYmRhKTtcblxuICAgIC8vIE91dHB1dHNcbiAgfVxufVxuIl19