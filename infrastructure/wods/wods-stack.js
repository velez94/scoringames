"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WodsStack = void 0;
const cdk = require("aws-cdk-lib");
const dynamodb = require("aws-cdk-lib/aws-dynamodb");
const lambda = require("aws-cdk-lib/aws-lambda");
const events = require("aws-cdk-lib/aws-events");
const constructs_1 = require("constructs");
class WodsStack extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        // Domain-specific EventBridge Bus
        this.wodsEventBus = new events.EventBus(this, 'WodsEventBus', {
            eventBusName: `wods-domain-${props.stage}`,
        });
        // WODs Table
        this.wodsTable = new dynamodb.Table(this, 'WodsTable', {
            partitionKey: { name: 'eventId', type: dynamodb.AttributeType.STRING },
            sortKey: { name: 'wodId', type: dynamodb.AttributeType.STRING },
            billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,
            removalPolicy: cdk.RemovalPolicy.DESTROY,
        });
        // WODs Lambda
        this.wodsLambda = new lambda.Function(this, 'WodsLambda', {
            runtime: lambda.Runtime.NODEJS_18_X,
            handler: 'index.handler',
            code: lambda.Code.fromAsset('lambda/wods'),
            timeout: cdk.Duration.seconds(30),
            memorySize: 256,
            environment: {
                WODS_TABLE: this.wodsTable.tableName,
                ORGANIZATION_EVENTS_TABLE: props.organizationEventsTable.tableName,
                ORGANIZATION_MEMBERS_TABLE: props.organizationMembersTable.tableName,
                DOMAIN_EVENT_BUS: this.wodsEventBus.eventBusName,
                CENTRAL_EVENT_BUS: props.eventBus.eventBusName,
            },
        });
        // Grant permissions
        this.wodsTable.grantReadWriteData(this.wodsLambda);
        props.organizationEventsTable.grantReadData(this.wodsLambda);
        props.organizationMembersTable.grantReadData(this.wodsLambda);
        this.wodsEventBus.grantPutEventsTo(this.wodsLambda);
        props.eventBus.grantPutEventsTo(this.wodsLambda);
        // Outputs
    }
}
exports.WodsStack = WodsStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29kcy1zdGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndvZHMtc3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbUNBQW1DO0FBQ25DLHFEQUFxRDtBQUNyRCxpREFBaUQ7QUFFakQsaURBQWlEO0FBQ2pELDJDQUF1QztBQVF2QyxNQUFhLFNBQVUsU0FBUSxzQkFBUztJQUt0QyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQXFCO1FBQzdELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsa0NBQWtDO1FBQ2xDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxjQUFjLEVBQUU7WUFDNUQsWUFBWSxFQUFFLGVBQWUsS0FBSyxDQUFDLEtBQUssRUFBRTtTQUMzQyxDQUFDLENBQUM7UUFFSCxhQUFhO1FBQ2IsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRTtZQUNyRCxZQUFZLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRTtZQUN0RSxPQUFPLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRTtZQUMvRCxXQUFXLEVBQUUsUUFBUSxDQUFDLFdBQVcsQ0FBQyxlQUFlO1lBQ2pELGFBQWEsRUFBRSxHQUFHLENBQUMsYUFBYSxDQUFDLE9BQU87U0FDekMsQ0FBQyxDQUFDO1FBRUgsY0FBYztRQUNkLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUU7WUFDeEQsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVztZQUNuQyxPQUFPLEVBQUUsZUFBZTtZQUN4QixJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDO1lBQzFDLE9BQU8sRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDakMsVUFBVSxFQUFFLEdBQUc7WUFDZixXQUFXLEVBQUU7Z0JBQ1gsVUFBVSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUztnQkFDcEMseUJBQXlCLEVBQUUsS0FBSyxDQUFDLHVCQUF1QixDQUFDLFNBQVM7Z0JBQ2xFLDBCQUEwQixFQUFFLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxTQUFTO2dCQUNwRSxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVk7Z0JBQ2hELGlCQUFpQixFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsWUFBWTthQUMvQztTQUNGLENBQUMsQ0FBQztRQUVILG9CQUFvQjtRQUNwQixJQUFJLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNuRCxLQUFLLENBQUMsdUJBQXVCLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM3RCxLQUFLLENBQUMsd0JBQXdCLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM5RCxJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNwRCxLQUFLLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUVqRCxVQUFVO0lBQ1osQ0FBQztDQUNGO0FBOUNELDhCQThDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgKiBhcyBkeW5hbW9kYiBmcm9tICdhd3MtY2RrLWxpYi9hd3MtZHluYW1vZGInO1xuaW1wb3J0ICogYXMgbGFtYmRhIGZyb20gJ2F3cy1jZGstbGliL2F3cy1sYW1iZGEnO1xuaW1wb3J0ICogYXMgYXBpZ2F0ZXdheSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtYXBpZ2F0ZXdheSc7XG5pbXBvcnQgKiBhcyBldmVudHMgZnJvbSAnYXdzLWNkay1saWIvYXdzLWV2ZW50cyc7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcblxuZXhwb3J0IGludGVyZmFjZSBXb2RzU3RhY2tQcm9wcyAge1xuICBzdGFnZTogc3RyaW5nOyAgZXZlbnRCdXM6IGV2ZW50cy5FdmVudEJ1cztcbiAgb3JnYW5pemF0aW9uRXZlbnRzVGFibGU6IGR5bmFtb2RiLlRhYmxlO1xuICBvcmdhbml6YXRpb25NZW1iZXJzVGFibGU6IGR5bmFtb2RiLlRhYmxlO1xufVxuXG5leHBvcnQgY2xhc3MgV29kc1N0YWNrIGV4dGVuZHMgQ29uc3RydWN0IHtcbiAgcHVibGljIHJlYWRvbmx5IHdvZHNMYW1iZGE6IGxhbWJkYS5GdW5jdGlvbjtcbiAgcHVibGljIHJlYWRvbmx5IHdvZHNUYWJsZTogZHluYW1vZGIuVGFibGU7XG4gIHB1YmxpYyByZWFkb25seSB3b2RzRXZlbnRCdXM6IGV2ZW50cy5FdmVudEJ1cztcblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogV29kc1N0YWNrUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgLy8gRG9tYWluLXNwZWNpZmljIEV2ZW50QnJpZGdlIEJ1c1xuICAgIHRoaXMud29kc0V2ZW50QnVzID0gbmV3IGV2ZW50cy5FdmVudEJ1cyh0aGlzLCAnV29kc0V2ZW50QnVzJywge1xuICAgICAgZXZlbnRCdXNOYW1lOiBgd29kcy1kb21haW4tJHtwcm9wcy5zdGFnZX1gLFxuICAgIH0pO1xuXG4gICAgLy8gV09EcyBUYWJsZVxuICAgIHRoaXMud29kc1RhYmxlID0gbmV3IGR5bmFtb2RiLlRhYmxlKHRoaXMsICdXb2RzVGFibGUnLCB7XG4gICAgICBwYXJ0aXRpb25LZXk6IHsgbmFtZTogJ2V2ZW50SWQnLCB0eXBlOiBkeW5hbW9kYi5BdHRyaWJ1dGVUeXBlLlNUUklORyB9LFxuICAgICAgc29ydEtleTogeyBuYW1lOiAnd29kSWQnLCB0eXBlOiBkeW5hbW9kYi5BdHRyaWJ1dGVUeXBlLlNUUklORyB9LFxuICAgICAgYmlsbGluZ01vZGU6IGR5bmFtb2RiLkJpbGxpbmdNb2RlLlBBWV9QRVJfUkVRVUVTVCxcbiAgICAgIHJlbW92YWxQb2xpY3k6IGNkay5SZW1vdmFsUG9saWN5LkRFU1RST1ksXG4gICAgfSk7XG5cbiAgICAvLyBXT0RzIExhbWJkYVxuICAgIHRoaXMud29kc0xhbWJkYSA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywgJ1dvZHNMYW1iZGEnLCB7XG4gICAgICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5OT0RFSlNfMThfWCxcbiAgICAgIGhhbmRsZXI6ICdpbmRleC5oYW5kbGVyJyxcbiAgICAgIGNvZGU6IGxhbWJkYS5Db2RlLmZyb21Bc3NldCgnbGFtYmRhL3dvZHMnKSxcbiAgICAgIHRpbWVvdXQ6IGNkay5EdXJhdGlvbi5zZWNvbmRzKDMwKSxcbiAgICAgIG1lbW9yeVNpemU6IDI1NixcbiAgICAgIGVudmlyb25tZW50OiB7XG4gICAgICAgIFdPRFNfVEFCTEU6IHRoaXMud29kc1RhYmxlLnRhYmxlTmFtZSxcbiAgICAgICAgT1JHQU5JWkFUSU9OX0VWRU5UU19UQUJMRTogcHJvcHMub3JnYW5pemF0aW9uRXZlbnRzVGFibGUudGFibGVOYW1lLFxuICAgICAgICBPUkdBTklaQVRJT05fTUVNQkVSU19UQUJMRTogcHJvcHMub3JnYW5pemF0aW9uTWVtYmVyc1RhYmxlLnRhYmxlTmFtZSxcbiAgICAgICAgRE9NQUlOX0VWRU5UX0JVUzogdGhpcy53b2RzRXZlbnRCdXMuZXZlbnRCdXNOYW1lLFxuICAgICAgICBDRU5UUkFMX0VWRU5UX0JVUzogcHJvcHMuZXZlbnRCdXMuZXZlbnRCdXNOYW1lLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIC8vIEdyYW50IHBlcm1pc3Npb25zXG4gICAgdGhpcy53b2RzVGFibGUuZ3JhbnRSZWFkV3JpdGVEYXRhKHRoaXMud29kc0xhbWJkYSk7XG4gICAgcHJvcHMub3JnYW5pemF0aW9uRXZlbnRzVGFibGUuZ3JhbnRSZWFkRGF0YSh0aGlzLndvZHNMYW1iZGEpO1xuICAgIHByb3BzLm9yZ2FuaXphdGlvbk1lbWJlcnNUYWJsZS5ncmFudFJlYWREYXRhKHRoaXMud29kc0xhbWJkYSk7XG4gICAgdGhpcy53b2RzRXZlbnRCdXMuZ3JhbnRQdXRFdmVudHNUbyh0aGlzLndvZHNMYW1iZGEpO1xuICAgIHByb3BzLmV2ZW50QnVzLmdyYW50UHV0RXZlbnRzVG8odGhpcy53b2RzTGFtYmRhKTtcblxuICAgIC8vIE91dHB1dHNcbiAgfVxufVxuIl19